-- Name: Hien Tu
-- macID: tun1

-- QUERY 1

-- Query to find all multi-day events
SELECT *
FROM event
WHERE days(enddate) - days(startdate) > 0
ORDER BY startdate ASC, title ASC;

-- Pretty print the above query
-- SELECT eid, CAST(title AS VARCHAR(30)), CAST(description AS VARCHAR(20)), startdate, enddate, organizer, postcode FROM event WHERE days(enddate) - days(startdate) > 0 ORDER BY startdate ASC, title ASC;

-- Clarifications:
-- The `days(enddate) - days(startdate)` part returns the number of days between
-- enddate and startdate. If the number of days is greater than 0, then the enddate
-- and startdate are not the same, which means that the event is a multi-day event.
-- We will select all the columns in the table event whose rows satisfy the above
-- condition. `ORDER BY startdate` will order the result by increasing startdate and
-- `title ASC` will order the result in alphabetical order on title in case the
-- events have the same startdate.


-- QUERY 2

-- Query the events in the Golden Horseshoe area
SELECT eid, title
FROM event
WHERE postcode IN (SELECT postcode FROM region WHERE name = 'Golden Horseshoe')
ORDER BY title ASC;

-- Clarifications:
-- `SELECT postcode FROM region WHERE name = 'Golden Horseshoe'` will return a
-- "list" of postal codes that are in the region named Golden Horseshoe. Thus,
-- `SELECT eid, title FROM event WHERE postcode in (SELECT postcode FROM region WHERE name = 'Golden Horseshoe')`
-- will return the columns eid and title of the table event whose event's postal code
-- is in the  above list. `ORDER BY title ASC` orders the result in alphabetical
-- order in title.


-- QUERY 3

-- Display all the users that have written review and are not the organizers
SELECT uid, name
FROM user
WHERE uid IN (SELECT "USER" FROM review) AND uid NOT IN (SELECT organizer FROM event);

-- Clarifications:
-- A user is active (have written a review) is the user whose uid is in the review,
-- that is the uid is in the user column of the table review. Thus, `uid IN (SELECT user FROM review)`
-- is a condition for the query. A user who is not the organizer of any events is
-- the user whose uid does not appear in the organizer column of the table event.
-- Thus, `uid NOT IN (SELECT organizer FROM event)` is the second condition for the
-- query. We then, only select the uid and name columns of the resulting table.
-- Since this query does not require ordering, we do not use `ORDER BY`.



-- QUERY 4

-- QUERY 4a)

-- Multi-line query
-- SELECT eid, title, description, startdate, enddate, organizer, postcode, nrev, ascore
-- FROM event LEFT OUTER JOIN 
--         (SELECT event, COUNT(*) AS nrev, AVG(score) AS ascore
--         FROM review
--         GROUP BY event) AS r
--      ON event.eid = r.event
-- ORDER BY ascore DESC, title ASC;

-- One-line Query
SELECT eid, title, description, startdate, enddate, organizer, postcode, nrev, ascore FROM event LEFT OUTER JOIN (SELECT event, COUNT(*) AS nrev, AVG(score) AS ascore FROM review GROUP BY event) AS r ON event.eid = r.event ORDER BY ascore DESC, title ASC;

-- Pretty print the query
-- SELECT eid, CAST(title AS VARCHAR(28)) AS title, CAST(description AS VARCHAR(12)) AS description, startdate, enddate, organizer, postcode, nrev, CAST(ascore AS DECIMAL) AS ascore FROM event LEFT OUTER JOIN (SELECT event, COUNT(*) AS nrev, AVG(score) AS ascore FROM review GROUP BY event) AS r ON event.eid = r.event ORDER BY ascore DESC, title ASC;

-- Clarifications:
-- `SELECT event, COUNT(*) AS nrev, AVG(score) AS ascore FROM review GROUP BY event`
-- will group the reviews by event id (eid) from the table review and show the event
-- id, the number of reviews for each event and the average score of the reviews for
-- each event. Then, we join the table event with this resulting table and match the
-- rows where the eid of table event equals to the event column of the above
-- resulting table. `LEFT OUTER JOIN` is used to also include events that have no 
-- review. After that, select the appropriate columns and order the rows
-- by decreasing average score and alphabetical order in title in case of events
-- having the same score.


-- QUERY 4b)
-- SELECT eid, title, description, startdate, enddate, organizer, postcode, nrev, ascore
-- FROM event INNER JOIN 
--         (SELECT event, COUNT(*) AS nrev, AVG(score) AS ascore 
--         FROM review
--         GROUP BY event
--         HAVING COUNT(*) >= 5) AS r 
--      ON event.eid = r.event
-- ORDER BY ascore DESC, title ASC;

-- One line Query
SELECT eid, title, description, startdate, enddate, organizer, postcode, nrev, ascore FROM event INNER JOIN (SELECT event, COUNT(*) AS nrev, AVG(score) AS ascore FROM review GROUP BY event HAVING COUNT(*) >= 5) AS r ON event.eid = r.event ORDER BY ascore DESC, title ASC;

-- Pretty print the query
-- SELECT eid, CAST(title AS VARCHAR(28)) AS title, CAST(description AS VARCHAR(12)) AS description, startdate, enddate, organizer, postcode, nrev, ascore FROM event INNER JOIN (SELECT event, COUNT(*) AS nrev, AVG(score) AS ascore FROM review GROUP BY event HAVING COUNT(*) >= 5) AS r ON event.eid = r.event ORDER BY ascore DESC, title ASC;

-- Clarifications:
-- Similar to part a) but we have `HAVING COUNT(*) >= 5` after 
-- `SELECT event, COUNT(*) AS nrev, AVG(score) AS ascore FROM review GROUP BY event`
-- to only include events with at least 5 reviews. Since we only include events with
-- at least 5 reviews, we used `INNER JOIN` instead of `LEFT OUTER JOIN`.



-- QUERY 5

-- Muti-line Query
-- SELECT e.eid, e.title
-- FROM event AS e INNER JOIN review AS r
-- ON e.eid = r.event AND (r.reviewdate < e.startdate OR r.user = e.organizer);

-- One-line Query
SELECT e.eid, e.title FROM event AS e INNER JOIN review AS r ON e.eid = r.event AND (r.reviewdate < e.startdate OR r.user = e.organizer);

-- Pretty print for testing
-- SELECT e.eid, CAST(e.title AS VARCHAR(25)) AS title, CAST(e.description AS VARCHAR(12)) AS eventdescription, e.startdate, e.enddate, e.organizer, e.postcode, r.user, r.event, CAST(r.description AS VARCHAR(20)) AS reviewdescription, r.score, r.reviewdate FROM event AS e INNER JOIN review AS r ON e.eid = r.event AND (r.reviewdate < e.startdate OR r.user = e.organizer);

-- Clarifications:
We will join the table event and the table review. Then, we only select rows
where first, the eid (of the table event) is the same as the event (of the table
review). Then, the row is selected if either the reviewdate is smaller than the
startdate (the review is written before the start of the event) or the review
user is the same as the event organizer.



-- QUERY 6

-- Main Query
-- SELECT u.uid, u.name
-- FROM
--     (SELECT "USER", COUNT(*) AS nrevs_local
--         FROM
--             (SELECT DISTINCT r.user, r.event
--                 FROM review AS r
--                     INNER JOIN
--                              (SELECT e.eid, re.name AS event_region_name
--                                 FROM event AS e INNER JOIN region AS re
--                                 ON e.postcode = re.postcode) AS e_re
--                         ON r.event = e_re.eid
--                     INNER JOIN
--                             (SELECT u.uid, re.name AS user_region_name
--                             FROM user AS u INNER JOIN region AS re
--                             ON u.postcode = re.postcode) AS u_re
--                         ON r.user = u_re.uid
--                 WHERE user_region_name = event_region_name)
--         GROUP BY "USER") AS local_revs
--     INNER JOIN
--             (SELECT "USER", COUNT(*) AS nrevs
--                 FROM review
--                 GROUP BY "USER") AS revs
--         ON local_revs.user = revs.user AND local_revs.nrevs_local = revs.nrevs
--     INNER JOIN
--             user AS u
--         ON local_revs.user = u.uid;


-- Clarifications:
-- The following sub-queries are steps taken to obtain the Main Query
-- Explanation is given in each query

-- Sub-query 1
-- Display the user uid and the region they are in
-- SELECT u.uid, re.name AS user_region_name
-- FROM user AS u INNER JOIN region AS re
-- ON u.postcode = re.postcode;

-- Sub-query 2
-- Display the event and the region the event happens in
-- SELECT e.eid, re.name AS event_region_name
-- FROM event AS e INNER JOIN region AS re
-- ON e.postcode = re.postcode;

-- Sub-query 3
-- Display review user, review event, user region name and event region name
-- but only where the user region name is the same as the event region name
-- that means only rows where the event is local to the user are selected
-- by joining the review table with the table from Sub-query 1
-- and the table from Sub-query 2 on the same user id and event id
-- where user_region_name = event_region_name
-- SELECT r.user, r.event, u_re.user_region_name, e_re.event_region_name
-- FROM review AS r
--     INNER JOIN
--              (SELECT e.eid, re.name AS event_region_name
--                 FROM event AS e INNER JOIN region AS re
--                 ON e.postcode = re.postcode) AS e_re
--         ON r.event = e_re.eid
--     INNER JOIN
--             (SELECT u.uid, re.name AS user_region_name
--             FROM user AS u INNER JOIN region AS re
--             ON u.postcode = re.postcode) AS u_re
--         ON r.user = u_re.uid
-- WHERE user_region_name = event_region_name;

-- Sub-query 4
-- The same as Sub-query 3 but only select distinct pair of user id and event id
-- SELECT DISTINCT r.user, r.event
-- FROM review AS r
--     INNER JOIN
--              (SELECT e.eid, re.name AS event_region_name
--                 FROM event AS e INNER JOIN region AS re
--                 ON e.postcode = re.postcode) AS e_re
--         ON r.event = e_re.eid
--     INNER JOIN
--             (SELECT u.uid, re.name AS user_region_name
--             FROM user AS u INNER JOIN region AS re
--             ON u.postcode = re.postcode) AS u_re
--         ON r.user = u_re.uid
-- WHERE user_region_name = event_region_name;

-- Sub-query 5
-- Display the user and the number of reviews for local events correspond to each user
-- using group by user and count(*) from Sub-query 4
-- SELECT "USER", COUNT(*) AS nrevs_local
-- FROM
--     (SELECT DISTINCT r.user, r.event
--         FROM review AS r
--             INNER JOIN
--                      (SELECT e.eid, re.name AS event_region_name
--                         FROM event AS e INNER JOIN region AS re
--                         ON e.postcode = re.postcode) AS e_re
--                 ON r.event = e_re.eid
--             INNER JOIN
--                     (SELECT u.uid, re.name AS user_region_name
--                     FROM user AS u INNER JOIN region AS re
--                     ON u.postcode = re.postcode) AS u_re
--                 ON r.user = u_re.uid
--         WHERE user_region_name = event_region_name)
-- GROUP BY "USER";

-- Sub-query 6
-- Display the user and the number of reviews each user has reviewed
-- SELECT "USER", COUNT(*) AS nrevs
-- FROM review
-- GROUP BY "USER";

-- Main Query
-- If the number of reviews for local events (in Sub-query 5) is equal to
-- the total number of reviews (in Sub-query 6) that a user has, then the
-- user only reviewed local event
-- To do that, we will join Sub-query 5 and Sub-query 6 on the same user
-- and the same number of reviews (nrevs_local = nrevs)
-- We will also join with the table user to get the user uid and the user name
-- SELECT u.uid, u.name
-- FROM
--     (SELECT "USER", COUNT(*) AS nrevs_local
--         FROM
--             (SELECT DISTINCT r.user, r.event
--                 FROM review AS r
--                     INNER JOIN
--                              (SELECT e.eid, re.name AS event_region_name
--                                 FROM event AS e INNER JOIN region AS re
--                                 ON e.postcode = re.postcode) AS e_re
--                         ON r.event = e_re.eid
--                     INNER JOIN
--                             (SELECT u.uid, re.name AS user_region_name
--                             FROM user AS u INNER JOIN region AS re
--                             ON u.postcode = re.postcode) AS u_re
--                         ON r.user = u_re.uid
--                 WHERE user_region_name = event_region_name)
--         GROUP BY "USER") AS local_revs
--     INNER JOIN
--             (SELECT "USER", COUNT(*) AS nrevs
--                 FROM review
--                 GROUP BY "USER") AS revs
--         ON local_revs.user = revs.user AND local_revs.nrevs_local = revs.nrevs
--     INNER JOIN
--             user AS u
--         ON local_revs.user = u.uid;



-- QUERY 7

-- Main Query
SELECT esk.fstid, esk.sndid
FROM
            (SELECT ek1.eid AS fstid, ek2.eid AS sndid, COUNT(*) AS n_same_kwords
                FROM
                            (SELECT e.eid, k.word
                                FROM event AS e INNER JOIN keyword AS k
                                ON e.eid = k.event) AS ek1
                    INNER JOIN
                            (SELECT e.eid, k.word
                                FROM event AS e INNER JOIN keyword AS k
                                ON e.eid = k.event) AS ek2
                        ON ek1.eid <> ek2.eid AND ek1.word = ek2.word
                GROUP BY ek1.eid, ek2.eid) AS esk
    INNER JOIN
            (SELECT ek1.eid AS fstid, ek2.eid AS sndid, ek1.nkwords
                FROM
                            (SELECT e.eid, COUNT(*) AS nkwords
                                FROM event AS e INNER JOIN keyword AS k
                                ON e.eid = k.event
                                GROUP BY e.eid) AS ek1
                    INNER JOIN
                            (SELECT e.eid, COUNT(*) AS nkwords
                                FROM event AS e INNER JOIN keyword AS k
                                ON e.eid = k.event
                                GROUP BY e.eid) AS ek2
                        ON ek1.eid <> ek2.eid AND ek1.nkwords = ek2.nkwords) AS etk
        ON esk.fstid = etk.fstid AND esk.sndid = etk.sndid AND esk.n_same_kwords = etk.nkwords
ORDER BY fstid ASC, sndid ASC;


-- Clarifications:
-- The following sub-queries are steps taken to obtain the Main Query
-- Explanation is given in each query

-- Sub-query 1
-- Display event id (eid) and keyword associated with the event
-- by joining the table event and keyword on the same event id
-- SELECT e.eid, k.word
-- FROM event AS e INNER JOIN keyword AS k
-- ON e.eid = k.event;

-- Sub-query 2
-- Display the event id and the number of keywords associated with that event
-- by adding to Sub-query 1 group by event id and using count(*)
-- SELECT e.eid, COUNT(*) AS nkwords
-- FROM event AS e INNER JOIN keyword AS k
-- ON e.eid = k.event
-- GROUP BY e.eid;

-- Sub-query 3
-- Display the event id 1, event id 2, and the keyword where
-- the event id 1 is different from the event id 2 and they have
-- the same keyword
-- by joining the table from Sub-query 1 with itself on different
-- event id and the same keyword
-- SELECT ek1.eid AS fstid, ek2.eid AS sndid, ek1.word
-- FROM
--             (SELECT e.eid, k.word
--                 FROM event AS e INNER JOIN keyword AS k
--                 ON e.eid = k.event) AS ek1
--     INNER JOIN
--             (SELECT e.eid, k.word
--                 FROM event AS e INNER JOIN keyword AS k
--                 ON e.eid = k.event) AS ek2
--         ON ek1.eid <> ek2.eid AND ek1.word = ek2.word;

-- Sub-query 4
-- Display the event id 1, the event id 2, and the number of same keywords
-- between the two events
-- by adding to Sub-query 3 the group by event id 1 and event id 2 and using
-- count(*) to count the number of rows
-- SELECT ek1.eid AS fstid, ek2.eid AS sndid, COUNT(*) AS n_same_kwords
-- FROM
--             (SELECT e.eid, k.word
--                 FROM event AS e INNER JOIN keyword AS k
--                 ON e.eid = k.event) AS ek1
--     INNER JOIN
--             (SELECT e.eid, k.word
--                 FROM event AS e INNER JOIN keyword AS k
--                 ON e.eid = k.event) AS ek2
--         ON ek1.eid <> ek2.eid AND ek1.word = ek2.word
-- GROUP BY ek1.eid, ek2.eid;

-- Sub-query 5
-- Display the event id 1, the event id 2, and the number of keywords
-- and the rows are selected such that the total number of keywords for
-- event id 1 is the same as for event id 2 and the two events are different
-- by joining the table from Sub-query 2 with itself on different event id
-- and the same total number of keywords
-- SELECT ek1.eid AS fstid, ek2.eid AS sndid, ek1.nkwords
-- FROM
--             (SELECT e.eid, COUNT(*) AS nkwords
--                 FROM event AS e INNER JOIN keyword AS k
--                 ON e.eid = k.event
--                 GROUP BY e.eid) AS ek1
--     INNER JOIN
--             (SELECT e.eid, COUNT(*) AS nkwords
--                 FROM event AS e INNER JOIN keyword AS k
--                 ON e.eid = k.event
--                 GROUP BY e.eid) AS ek2
--         ON ek1.eid <> ek2.eid AND ek1.nkwords = ek2.nkword

-- Main Query
-- Two different events have exact same keywords when they have
-- the same total number of keywords and the number of keywords
-- is equal to the number of same keywords between the two events
-- To do this, we join the tables from Sub-query 4 and Sub-query 5
-- on the same fstid, same sndid and n_same_kwords = n_kwords
-- SELECT esk.fstid, esk.sndid
-- FROM
--             (SELECT ek1.eid AS fstid, ek2.eid AS sndid, COUNT(*) AS n_same_kwords
--                 FROM
--                             (SELECT e.eid, k.word
--                                 FROM event AS e INNER JOIN keyword AS k
--                                 ON e.eid = k.event) AS ek1
--                     INNER JOIN
--                             (SELECT e.eid, k.word
--                                 FROM event AS e INNER JOIN keyword AS k
--                                 ON e.eid = k.event) AS ek2
--                         ON ek1.eid <> ek2.eid AND ek1.word = ek2.word
--                 GROUP BY ek1.eid, ek2.eid) AS esk
--     INNER JOIN
--             (SELECT ek1.eid AS fstid, ek2.eid AS sndid, ek1.nkwords
--                 FROM
--                             (SELECT e.eid, COUNT(*) AS nkwords
--                                 FROM event AS e INNER JOIN keyword AS k
--                                 ON e.eid = k.event
--                                 GROUP BY e.eid) AS ek1
--                     INNER JOIN
--                             (SELECT e.eid, COUNT(*) AS nkwords
--                                 FROM event AS e INNER JOIN keyword AS k
--                                 ON e.eid = k.event
--                                 GROUP BY e.eid) AS ek2
--                         ON ek1.eid <> ek2.eid AND ek1.nkwords = ek2.nkwords) AS etk
--         ON esk.fstid = etk.fstid AND esk.sndid = etk.sndid AND esk.n_same_kwords = etk.nkwords
-- ORDER BY fstid ASC, sndid ASC;



-- QUERY 8

-- Display the event and the popularity score (number of reviews + sum of the reviews)
SELECT event, COUNT(*) + SUM(score) AS pscore FROM review GROUP BY event

-- Query 8a)
-- Main Query
SELECT e.eid, e_re.pscore
FROM event AS e LEFT OUTER JOIN
    (SELECT event, COUNT(*) + SUM(score) AS pscore
    FROM review
    GROUP BY event) AS e_re
ON e.eid = e_re.event;

-- Clarifications:
-- `SELECT event, COUNT(*) + SUM(score) AS pscore FROM review GROUP BY event` will
-- group the reviews for the same event together and return the event id along with
-- its popularity score pscore (calculated by the number of review plus the sum of
-- all the reivew score for that event). We name this table e_re. Then we join the
-- table event with the table e_re. `LEFT OUTER JOIN` is used since we want to display
-- all the events (even if the event does not have any review). Then we choose the
-- rows where the event eid is equal to the event column of the table e_re. After
-- that, we select the eid column and the pscore column.


-- Query 8b)
-- Main Query
SELECT e.eid, e.title, e_re.pscore
FROM event AS e INNER JOIN
    (SELECT event, COUNT(*) + SUM(score) AS pscore
    FROM review GROUP BY event) AS e_re
ON e.eid = e_re.event AND e_re.pscore >= ALL (SELECT COUNT(*) + SUM(score) FROM review GROUP BY event)
ORDER BY e_re.pscore DESC, e.title ASC;

-- Pretty print the query
-- SELECT e.eid, CAST(e.title AS VARCHAR(30)), e_re.pscore FROM event AS e INNER JOIN (SELECT event, COUNT(*) + SUM(score) AS pscore FROM review GROUP BY event) AS e_re ON e.eid = e_re.event AND e_re.pscore >= ALL (SELECT COUNT(*) + SUM(score) FROM review GROUP BY event) ORDER BY e_re.pscore DESC, e.title ASC;

-- Clarifications:
-- Similar to query 8a) but `INNER JOIN` is used since we only want to display
-- certain events instead of all the events.
-- `e_re.pscore >= ALL (SELECT COUNT(*) + SUM(score) FROM review GROUP BY event)`
-- will select the highest number in the column pscore. Then, we select the eid
-- column, the title, and the pscore of the events that satisfy the conditions.



-- QUERY 9

-- Main Query for Query 9
(SELECT DISTINCT uid, kword
FROM
    (SELECT uid, 'keyword' AS kword FROM USER) AS uk
INNER JOIN
    (SELECT "USER", maxrev.word, max_nrevs
        FROM
            (SELECT "USER", word, COUNT(*) AS nrevs
                FROM
                    (SELECT "USER", event FROM review) AS r
                INNER JOIN
                    (SELECT e.eid, k.word
                        FROM event AS e INNER JOIN keyword AS k
                        ON e.eid = k.event) AS ek
                ON r.event = ek.eid
                GROUP BY "USER", word) AS rev
        INNER JOIN
            (SELECT word, MAX(nrevs) AS max_nrevs
                FROM
                    (SELECT "USER", word, COUNT(*) AS nrevs
                        FROM
                            (SELECT "USER", event FROM review) AS r
                        INNER JOIN
                            (SELECT e.eid, k.word
                                FROM event AS e INNER JOIN keyword AS k
                                    ON e.eid = k.event) AS ek
                        ON r.event = ek.eid
                        GROUP BY "USER", word)
                GROUP BY word) AS maxrev
        ON rev.word = maxrev.word AND rev.nrevs = maxrev.max_nrevs) AS rev
ON uk.uid = rev.user)
UNION
(SELECT DISTINCT uid, region_badge
FROM
            (SELECT uid, 'region' AS region_badge FROM user) AS ur
    INNER JOIN
            (SELECT "USER", e_rev.event_region_name, e_max_rev.max_nrevs
                FROM
                            (SELECT "USER", event_region_name, COUNT(*) AS nrevs
                                FROM
                                            (SELECT e.eid, re.name AS event_region_name
                                                FROM event AS e INNER JOIN region AS re
                                                ON e.postcode = re.postcode) AS e_re
                                    INNER JOIN
                                            (SELECT "USER", event FROM review) AS r
                                        ON e_re.eid = r.event
                                GROUP BY "USER", event_region_name) AS e_rev
                    INNER JOIN
                            (SELECT event_region_name, MAX(nrevs) AS max_nrevs
                                FROM
                                     (SELECT "USER", event_region_name, COUNT(*) AS nrevs
                                        FROM
                                                    (SELECT e.eid, re.name AS event_region_name
                                                        FROM event AS e INNER JOIN region AS re
                                                        ON e.postcode = re.postcode) AS e_re
                                            INNER JOIN
                                                    (SELECT "USER", event FROM review) AS r
                                                ON e_re.eid = r.event
                                        GROUP BY "USER", event_region_name)
                                GROUP BY event_region_name) AS e_max_rev
                        ON e_rev.event_region_name = e_max_rev.event_region_name AND
                           e_rev.nrevs = e_max_rev.max_nrevs) AS reg
        ON ur.uid = reg.user);

-- Clarifications:
-- Query 9 consists of 3 parts
-- Part 1 finds users that have written the most reviews for events with a specific keyword
-- Part 2 finds users that have written the most reviews for events in a specific region
-- Part 3 unions Part 1 and Part 2

-- PART 1

-- Main Query for Part 1
-- Display the uid and the literal string 'keyword' for user with the most number
-- of reviews for the events with some specific keyword
-- SELECT DISTINCT uid, kword
-- FROM
--             (SELECT uid, 'keyword' AS kword FROM USER) AS uk
--     INNER JOIN
--             (SELECT "USER", maxrev.word, max_nrevs
--                 FROM
--                             (SELECT "USER", word, COUNT(*) AS nrevs
--                                 FROM
--                                             (SELECT "USER", event FROM review) AS r
--                                     INNER JOIN
--                                             (SELECT e.eid, k.word
--                                                 FROM event AS e INNER JOIN keyword AS k
--                                                     ON e.eid = k.event) AS ek
--                                         ON r.event = ek.eid
--                                 GROUP BY "USER", word) AS rev
--                     INNER JOIN
--                             (SELECT word, MAX(nrevs) AS max_nrevs
--                                 FROM
--                                     (SELECT "USER", word, COUNT(*) AS nrevs
--                                     FROM
--                                                 (SELECT "USER", event FROM review) AS r
--                                         INNER JOIN
--                                                 (SELECT e.eid, k.word
--                                                     FROM event AS e INNER JOIN keyword AS k
--                                                         ON e.eid = k.event) AS ek
--                                             ON r.event = ek.eid
--                                     GROUP BY "USER", word)
--                                 GROUP BY word) AS maxrev
--                         ON rev.word = maxrev.word AND rev.nrevs = maxrev.max_nrevs) AS rev
--         ON uk.uid = rev.user;

-- Clarifications:
-- The below sub-queries explain the process to obtain the Main Query for Part 1
-- with explanation in each sub-query

-- Sub-query 1
-- Display review user and review event
-- SELECT "USER", event FROM review;

-- Sub-query 2
-- Display event id (eid) and keyword associated with the event
-- SELECT e.eid, k.word FROM event AS e INNER JOIN keyword AS k ON e.eid = k.event;

-- Sub-query 3
-- Display the review user id, review event id, and the keywords associated with the event
-- by INNER JOIN-ing Sub-query 1 and Sub-query 2 on the same event id
-- SELECT "USER", event, word
-- FROM
--             (SELECT "USER", event FROM review) AS r
--     INNER JOIN
--             (SELECT e.eid, k.word
--                 FROM event AS e INNER JOIN keyword AS k
--                     ON e.eid = k.event) AS ek
--         ON r.event = ek.eid;

-- Sub-query 4
-- Display the review user id, the keyword and the number of times the user 
-- review an even with that keyword
-- Similar to Sub-query 3 but we add group by user id and keyword and count
-- the number of reviews
-- SELECT "USER", word, COUNT(*) AS nrevs
-- FROM
--             (SELECT "USER", event FROM review) AS r
--     INNER JOIN
--             (SELECT e.eid, k.word
--                 FROM event AS e INNER JOIN keyword AS k
--                     ON e.eid = k.event) AS ek
--         ON r.event = ek.eid
-- GROUP BY "USER", word;

-- Sub-query 5
-- Display the keyword and the max number of reviews associated with that keyword
-- by taking the table from Sub-query 4 and add group by word and take the max
-- of nrevs for each keyword
-- SELECT word, MAX(nrevs) AS max_nrevs
-- FROM
--     (SELECT "USER", word, COUNT(*) AS nrevs
--     FROM
--                 (SELECT "USER", event FROM review) AS r
--         INNER JOIN
--                 (SELECT e.eid, k.word
--                     FROM event AS e INNER JOIN keyword AS k
--                         ON e.eid = k.event) AS ek
--             ON r.event = ek.eid
--     GROUP BY "USER", word)
-- GROUP BY word;

-- Sub-query 6
-- Display the review user who has the most reviews associated with the keyword,
-- the keyword itself, and the max number of reviews associated  with that keyword
-- by joining Sub-query 4 and Sub-query 5 on the same keywords and the same number of
-- reviews (max reviews) associated with that keyword
-- SELECT "USER", maxrev.word, max_nrevs
-- FROM
--             (SELECT "USER", word, COUNT(*) AS nrevs
--                 FROM
--                             (SELECT "USER", event FROM review) AS r
--                     INNER JOIN
--                             (SELECT e.eid, k.word
--                                 FROM event AS e INNER JOIN keyword AS k
--                                     ON e.eid = k.event) AS ek
--                         ON r.event = ek.eid
--                 GROUP BY "USER", word) AS rev
--     INNER JOIN
--             (SELECT word, MAX(nrevs) AS max_nrevs
--                 FROM
--                     (SELECT "USER", word, COUNT(*) AS nrevs
--                     FROM
--                                 (SELECT "USER", event FROM review) AS r
--                         INNER JOIN
--                                 (SELECT e.eid, k.word
--                                     FROM event AS e INNER JOIN keyword AS k
--                                         ON e.eid = k.event) AS ek
--                             ON r.event = ek.eid
--                     GROUP BY "USER", word)
--                 GROUP BY word) AS maxrev
--         ON rev.word = maxrev.word AND rev.nrevs = maxrev.max_nrevs;

-- Sub-query 7
-- Display the uid and the literal string 'keyword'
-- SELECT uid, 'keyword' AS kword FROM USER;

-- Main Query for Part 1
-- Display the uid and the literal string 'keyword' for user with the most number
-- of reviews for the events with some specific keyword
-- by joining Sub-query 6 and Sub-query 7 on the uid = user columns.
-- SELECT DISTINCT uid, kword
-- FROM
--             (SELECT uid, 'keyword' AS kword FROM USER) AS uk
--     INNER JOIN
--             (SELECT "USER", maxrev.word, max_nrevs
--                 FROM
--                             (SELECT "USER", word, COUNT(*) AS nrevs
--                                 FROM
--                                             (SELECT "USER", event FROM review) AS r
--                                     INNER JOIN
--                                             (SELECT e.eid, k.word
--                                                 FROM event AS e INNER JOIN keyword AS k
--                                                     ON e.eid = k.event) AS ek
--                                         ON r.event = ek.eid
--                                 GROUP BY "USER", word) AS rev
--                     INNER JOIN
--                             (SELECT word, MAX(nrevs) AS max_nrevs
--                                 FROM
--                                     (SELECT "USER", word, COUNT(*) AS nrevs
--                                     FROM
--                                                 (SELECT "USER", event FROM review) AS r
--                                         INNER JOIN
--                                                 (SELECT e.eid, k.word
--                                                     FROM event AS e INNER JOIN keyword AS k
--                                                         ON e.eid = k.event) AS ek
--                                             ON r.event = ek.eid
--                                     GROUP BY "USER", word)
--                                 GROUP BY word) AS maxrev
--                         ON rev.word = maxrev.word AND rev.nrevs = maxrev.max_nrevs) AS rev
--         ON uk.uid = rev.user;


-- PART 2

-- Main Query for Part 2
-- Display the uid and the literal string 'keyword' for user with the most number
-- of reviews for the events within a region
-- SELECT DISTINCT uid, region_badge
-- FROM
--             (SELECT uid, 'region' AS region_badge FROM user) AS ur
--     INNER JOIN
--             (SELECT "USER", e_rev.event_region_name, e_max_rev.max_nrevs
--                 FROM
--                             (SELECT "USER", event_region_name, COUNT(*) AS nrevs
--                                 FROM
--                                             (SELECT e.eid, re.name AS event_region_name
--                                                 FROM event AS e INNER JOIN region AS re
--                                                 ON e.postcode = re.postcode) AS e_re
--                                     INNER JOIN
--                                             (SELECT "USER", event FROM review) AS r
--                                         ON e_re.eid = r.event
--                                 GROUP BY "USER", event_region_name) AS e_rev
--                     INNER JOIN
--                             (SELECT event_region_name, MAX(nrevs) AS max_nrevs
--                                 FROM
--                                      (SELECT "USER", event_region_name, COUNT(*) AS nrevs
--                                         FROM
--                                                     (SELECT e.eid, re.name AS event_region_name
--                                                         FROM event AS e INNER JOIN region AS re
--                                                         ON e.postcode = re.postcode) AS e_re
--                                             INNER JOIN
--                                                     (SELECT "USER", event FROM review) AS r
--                                                 ON e_re.eid = r.event
--                                         GROUP BY "USER", event_region_name)
--                                 GROUP BY event_region_name) AS e_max_rev
--                         ON e_rev.event_region_name = e_max_rev.event_region_name AND
--                            e_rev.nrevs = e_max_rev.max_nrevs) AS reg
--         ON ur.uid = reg.user;

-- Clarifications:
-- The below sub-queries explain the process to obtain the Main Query for Part 2
-- with explanation in each sub-query

-- Sub-query 1
-- Display the event id and the region the event happens in
-- SELECT e.eid, re.name AS event_region_name
-- FROM event AS e INNER JOIN region AS re
--     ON e.postcode = re.postcode;

-- Sub-query 2
-- Display the review user id and the event id from the table review
-- SELECT "USER", event FROM review;

-- Sub-query 3
-- Display the review user id, the event id and the region the event happens in
-- by joining Sub-query 1 and Sub-query 2 on the same event id
-- SELECT "USER", event, event_region_name
-- FROM
--             (SELECT e.eid, re.name AS event_region_name
--                 FROM event AS e INNER JOIN region AS re
--                 ON e.postcode = re.postcode) AS e_re
--     INNER JOIN
--             (SELECT "USER", event FROM review) AS r
--         ON e_re.eid = r.event;

-- Sub-query 4
-- Display the review user id, the region name of the event and the number of reviews
-- that user has reviewed for events at that region
-- Similar to Sub-query 3 but add group by user id and event region name, and
-- select user id, event_region_name, count(*)
-- SELECT "USER", event_region_name, COUNT(*) AS nrevs
-- FROM
--             (SELECT e.eid, re.name AS event_region_name
--                 FROM event AS e INNER JOIN region AS re
--                 ON e.postcode = re.postcode) AS e_re
--     INNER JOIN
--             (SELECT "USER", event FROM review) AS r
--         ON e_re.eid = r.event
-- GROUP BY "USER", event_region_name;

-- Sub-query 5
-- Display the region name of the events and the max number of reviews associated
-- with that region
-- by using Sub-query 4 group by event_region_name and select max(nrevs)
-- SELECT event_region_name, MAX(nrevs) AS max_nrevs
-- FROM
--      (SELECT "USER", event_region_name, COUNT(*) AS nrevs
--         FROM
--                     (SELECT e.eid, re.name AS event_region_name
--                         FROM event AS e INNER JOIN region AS re
--                         ON e.postcode = re.postcode) AS e_re
--             INNER JOIN
--                     (SELECT "USER", event FROM review) AS r
--                 ON e_re.eid = r.event
--         GROUP BY "USER", event_region_name)
-- GROUP BY event_region_name;

-- Sub-query 6
-- Display the review user id who has the most reviews in the event region, the
-- event region name itself and the max number of reviews associated with that
-- event region
-- by joining Sub-query 4 and Sub-query 5 on the same event region name and
-- the number of reviews = max number of reviews associated with that region
-- SELECT "USER", e_rev.event_region_name, e_max_rev.max_nrevs
-- FROM
--             (SELECT "USER", event_region_name, COUNT(*) AS nrevs
--                 FROM
--                             (SELECT e.eid, re.name AS event_region_name
--                                 FROM event AS e INNER JOIN region AS re
--                                 ON e.postcode = re.postcode) AS e_re
--                     INNER JOIN
--                             (SELECT "USER", event FROM review) AS r
--                         ON e_re.eid = r.event
--                 GROUP BY "USER", event_region_name) AS e_rev
--     INNER JOIN
--             (SELECT event_region_name, MAX(nrevs) AS max_nrevs
--                 FROM
--                      (SELECT "USER", event_region_name, COUNT(*) AS nrevs
--                         FROM
--                                     (SELECT e.eid, re.name AS event_region_name
--                                         FROM event AS e INNER JOIN region AS re
--                                         ON e.postcode = re.postcode) AS e_re
--                             INNER JOIN
--                                     (SELECT "USER", event FROM review) AS r
--                                 ON e_re.eid = r.event
--                         GROUP BY "USER", event_region_name)
--                 GROUP BY event_region_name) AS e_max_rev
--         ON e_rev.event_region_name = e_max_rev.event_region_name AND
--            e_rev.nrevs = e_max_rev.max_nrevs;

-- Sub-query 7
-- Display the user uid and the literal string 'region' from table user
-- SELECT uid, 'region' AS region_badge FROM user;

-- Main Query for Part 2
-- Display the uid and the literal string 'keyword' for user with the most number
-- of reviews for the events within a region
-- by joining  Sub-query 6 and Sub-query 7 on the same user id
-- SELECT DISTINCT uid, region_badge
-- FROM
--             (SELECT uid, 'region' AS region_badge FROM user) AS ur
--     INNER JOIN
--             (SELECT "USER", e_rev.event_region_name, e_max_rev.max_nrevs
--                 FROM
--                             (SELECT "USER", event_region_name, COUNT(*) AS nrevs
--                                 FROM
--                                             (SELECT e.eid, re.name AS event_region_name
--                                                 FROM event AS e INNER JOIN region AS re
--                                                 ON e.postcode = re.postcode) AS e_re
--                                     INNER JOIN
--                                             (SELECT "USER", event FROM review) AS r
--                                         ON e_re.eid = r.event
--                                 GROUP BY "USER", event_region_name) AS e_rev
--                     INNER JOIN
--                             (SELECT event_region_name, MAX(nrevs) AS max_nrevs
--                                 FROM
--                                      (SELECT "USER", event_region_name, COUNT(*) AS nrevs
--                                         FROM
--                                                     (SELECT e.eid, re.name AS event_region_name
--                                                         FROM event AS e INNER JOIN region AS re
--                                                         ON e.postcode = re.postcode) AS e_re
--                                             INNER JOIN
--                                                     (SELECT "USER", event FROM review) AS r
--                                                 ON e_re.eid = r.event
--                                         GROUP BY "USER", event_region_name)
--                                 GROUP BY event_region_name) AS e_max_rev
--                         ON e_rev.event_region_name = e_max_rev.event_region_name AND
--                            e_rev.nrevs = e_max_rev.max_nrevs) AS reg
--         ON ur.uid = reg.user;

-- PART 3: FINAL QUERY
-- Union the two Main Query for Part 1 and Part 2
-- (SELECT DISTINCT uid, kword FROM (SELECT uid, 'keyword' AS kword FROM USER) AS a INNER JOIN (SELECT "USER", a.word, max_nrevs FROM (SELECT "USER", word, COUNT(*) AS nrevs FROM (SELECT "USER", event, word FROM (SELECT "USER", event, CAST(description AS VARCHAR(30)) AS description, score, reviewdate FROM review) AS r INNER JOIN (SELECT e.eid, k.word FROM event AS e INNER JOIN keyword AS k ON e.eid = k.event) AS ek ON r.event = ek.eid) GROUP BY "USER", word) AS a INNER JOIN (SELECT word, MAX(nrevs) AS max_nrevs FROM (SELECT "USER", word, COUNT(*) AS nrevs FROM (SELECT "USER", event, word FROM (SELECT "USER", event, CAST(description AS VARCHAR(30)) AS description, score, reviewdate FROM review) AS r INNER JOIN (SELECT e.eid, k.word FROM event AS e INNER JOIN keyword AS k ON e.eid = k.event) AS ek ON r.event = ek.eid) GROUP BY "USER", word) GROUP BY word) AS b ON a.word = b.word AND a.nrevs = b.max_nrevs) AS b ON a.uid = b.user) UNION (SELECT DISTINCT uid, region_badge FROM (SELECT uid, 'region' AS region_badge FROM user) AS u INNER JOIN (SELECT "USER", a.region_name, max_nrevs FROM (SELECT "USER", region_name, COUNT(*) AS nrevs FROM (SELECT "USER", event, region_name FROM (SELECT e.eid, CAST(re.name AS VARCHAR(30)) AS region_name FROM event AS e INNER JOIN region AS re ON e.postcode = re.postcode) AS e_re INNER JOIN (SELECT "USER", event FROM review) AS r ON e_re.eid = r.event) GROUP BY "USER", region_name) AS a INNER JOIN (SELECT region_name, MAX(nrevs) AS max_nrevs FROM (SELECT "USER", region_name, COUNT(*) AS nrevs FROM (SELECT "USER", event, region_name FROM (SELECT e.eid, CAST(re.name AS VARCHAR(30)) AS region_name FROM event AS e INNER JOIN region AS re ON e.postcode = re.postcode) AS e_re INNER JOIN (SELECT "USER", event FROM review) AS r ON e_re.eid = r.event) GROUP BY "USER", region_name) GROUP BY region_name) AS b ON a.region_name = b.region_name AND a.nrevs = b.max_nrevs) AS b ON u.uid = b.user);
-- (SELECT DISTINCT uid, kword
-- FROM
--     (SELECT uid, 'keyword' AS kword FROM USER) AS uk
-- INNER JOIN
--     (SELECT "USER", maxrev.word, max_nrevs
--         FROM
--             (SELECT "USER", word, COUNT(*) AS nrevs
--                 FROM
--                     (SELECT "USER", event FROM review) AS r
--                 INNER JOIN
--                     (SELECT e.eid, k.word
--                         FROM event AS e INNER JOIN keyword AS k
--                         ON e.eid = k.event) AS ek
--                 ON r.event = ek.eid
--                 GROUP BY "USER", word) AS rev
--         INNER JOIN
--             (SELECT word, MAX(nrevs) AS max_nrevs
--                 FROM
--                     (SELECT "USER", word, COUNT(*) AS nrevs
--                         FROM
--                             (SELECT "USER", event FROM review) AS r
--                         INNER JOIN
--                             (SELECT e.eid, k.word
--                                 FROM event AS e INNER JOIN keyword AS k
--                                     ON e.eid = k.event) AS ek
--                         ON r.event = ek.eid
--                         GROUP BY "USER", word)
--                 GROUP BY word) AS maxrev
--         ON rev.word = maxrev.word AND rev.nrevs = maxrev.max_nrevs) AS rev
-- ON uk.uid = rev.user)
-- UNION
-- (SELECT DISTINCT uid, region_badge
-- FROM
--             (SELECT uid, 'region' AS region_badge FROM user) AS ur
--     INNER JOIN
--             (SELECT "USER", e_rev.event_region_name, e_max_rev.max_nrevs
--                 FROM
--                             (SELECT "USER", event_region_name, COUNT(*) AS nrevs
--                                 FROM
--                                             (SELECT e.eid, re.name AS event_region_name
--                                                 FROM event AS e INNER JOIN region AS re
--                                                 ON e.postcode = re.postcode) AS e_re
--                                     INNER JOIN
--                                             (SELECT "USER", event FROM review) AS r
--                                         ON e_re.eid = r.event
--                                 GROUP BY "USER", event_region_name) AS e_rev
--                     INNER JOIN
--                             (SELECT event_region_name, MAX(nrevs) AS max_nrevs
--                                 FROM
--                                      (SELECT "USER", event_region_name, COUNT(*) AS nrevs
--                                         FROM
--                                                     (SELECT e.eid, re.name AS event_region_name
--                                                         FROM event AS e INNER JOIN region AS re
--                                                         ON e.postcode = re.postcode) AS e_re
--                                             INNER JOIN
--                                                     (SELECT "USER", event FROM review) AS r
--                                                 ON e_re.eid = r.event
--                                         GROUP BY "USER", event_region_name)
--                                 GROUP BY event_region_name) AS e_max_rev
--                         ON e_rev.event_region_name = e_max_rev.event_region_name AND
--                            e_rev.nrevs = e_max_rev.max_nrevs) AS reg
--         ON ur.uid = reg.user);



-- QUERY 10

-- Main Query
SELECT sum_fac.user, CAST(((sum_fac.sum_factors - COALESCE(sscored_nrevs, 0)) / r.nrevs) AS DECIMAL) AS si
FROM
            (SELECT "USER", SUM(score_factor) AS sum_factors
            FROM (SELECT "USER", r.event, score, ascore, ABS(score - ascore) AS score_factor
                    FROM
                                (SELECT "USER", event, score FROM review) AS r
                        INNER JOIN
                                (SELECT event, CAST(AVG(score) AS DECIMAL) AS ascore
                                    FROM review
                                    GROUP BY event) AS agr
                            ON r.event = agr.event)
            GROUP BY "USER") AS sum_fac
    LEFT OUTER JOIN
            (SELECT "USER", COUNT(*) AS sscored_nrevs
            FROM
                        (SELECT "USER", event, score FROM review) AS r
                INNER JOIN
                        (SELECT event, CAST(AVG(score) AS DECIMAL) AS ascore
                            FROM review
                            GROUP BY event) AS agr
                    ON r.event = agr.event AND r.score = agr.ascore
            GROUP BY "USER") AS sscore
        ON sum_fac.user = sscore.user
    INNER JOIN
            (SELECT "USER", COUNT(*) AS nrevs FROM review GROUP BY "USER") AS r
        ON r.user = sum_fac.user
ORDER BY si DESC;


-- Clarifications:
-- The below sub-queries explain the process to obtain the Main Query
-- with explanation in each sub-query

-- Sub-query 1
-- Display the review user id, review event id and the review score from table review
-- SELECT "USER", event, score FROM review;

-- Sub-query 2
-- Display the review event and the average review score for each event
-- SELECT event, CAST(AVG(score) AS DECIMAL) AS ascore FROM review GROUP BY event;

-- Sub-query 3
-- Display the review user id, review event id, the review score by that user,
-- the average review score and the score factor (absolute value of
-- (review score - average review score)) for that event
-- by joining Sub-query 1 and Sub-query 2 on the same event id
-- SELECT "USER", r.event, score, ascore, ABS(score - ascore) AS score_factor
-- FROM
--             (SELECT "USER", event, score FROM review) AS r
--     INNER JOIN
--             (SELECT event, CAST(AVG(score) AS DECIMAL) AS ascore
--                 FROM review
--                 GROUP BY event) AS agr
--         ON r.event = agr.event;

-- Sub-query 4
-- Display the review user id, the sum of all score factors of that user
-- by using SUM(score_factor) and group by user id of the Sub-query 3
-- SELECT "USER", SUM(score_factor) AS sum_factors
-- FROM (SELECT "USER", r.event, score, ascore, ABS(score - ascore) AS score_factor
--         FROM
--                     (SELECT "USER", event, score FROM review) AS r
--             INNER JOIN
--                     (SELECT event, CAST(AVG(score) AS DECIMAL) AS ascore
--                         FROM review
--                         GROUP BY event) AS agr
--                 ON r.event = agr.event)
-- GROUP BY "USER";

-- Sub-query 5
-- Display the review user id and the number of standard-scored reviews for that
-- user by using the table from Sub-query 3 and adding another condition
-- score = ascore for inner join, and then group by "USER"
-- since the standard-scored review has score = ascore
-- Note that this will only return users who have standard-scored reviews,
-- users who review but don't have standard-scored reviews will not appear
-- in this table
-- SELECT "USER", COUNT(*) AS sscored_nrevs
-- FROM
--             (SELECT "USER", event, score FROM review) AS r
--     INNER JOIN
--             (SELECT event, CAST(AVG(score) AS DECIMAL) AS ascore
--                 FROM review
--                 GROUP BY event) AS agr
--         ON r.event = agr.event AND r.score = agr.ascore
-- GROUP BY "USER";

-- Sub-query 6
-- Display the review user id, and total number of reviews for that user from the review table
-- SELECT "USER", COUNT(*) AS nrevs FROM review GROUP BY "USER";

-- Sub-query 7
-- Display the review user id and the result of ((L+H) - S), the numerator
-- of the scoring indicator si
-- Note that, since the table in Sub-query 5 only contains users who have
-- standard-scored reviews and doesn't contain users who review but don't
-- have standard-scored reviews, we will use Sub-query 4 and LEFT OUTER JOIN
-- with Sub-query 5
-- Users without standard-scored reviews will have null as value
-- for the column sscored_nrevs, we will convert this null value to 0 using
-- COALESCE
-- SELECT sum_fac.user, (sum_fac.sum_factors - COALESCE(sscored_nrevs, 0)) AS numer
-- FROM
--             (SELECT "USER", SUM(score_factor) AS sum_factors
--             FROM (SELECT "USER", r.event, score, ascore, ABS(score - ascore) AS score_factor
--                     FROM
--                                 (SELECT "USER", event, score FROM review) AS r
--                         INNER JOIN
--                                 (SELECT event, CAST(AVG(score) AS DECIMAL) AS ascore
--                                     FROM review
--                                     GROUP BY event) AS agr
--                             ON r.event = agr.event)
--             GROUP BY "USER") AS sum_fac
--     LEFT OUTER JOIN
--             (SELECT "USER", COUNT(*) AS sscored_nrevs
--             FROM
--                         (SELECT "USER", event, score FROM review) AS r
--                 INNER JOIN
--                         (SELECT event, CAST(AVG(score) AS DECIMAL) AS ascore
--                             FROM review
--                             GROUP BY event) AS agr
--                     ON r.event = agr.event AND r.score = agr.ascore
--             GROUP BY "USER") AS sscore
--         ON sum_fac.user = sscore.user;

-- Main Query
-- Similar to Sub-query 7 but we also INNER JOIN with table from Sub-query 6
-- on the same user id and we also divide the number of reviews of each user
-- SELECT sum_fac.user, CAST(((sum_fac.sum_factors - COALESCE(sscored_nrevs, 0)) / r.nrevs) AS DECIMAL) AS si
-- FROM
--             (SELECT "USER", SUM(score_factor) AS sum_factors
--             FROM (SELECT "USER", r.event, score, ascore, ABS(score - ascore) AS score_factor
--                     FROM
--                                 (SELECT "USER", event, score FROM review) AS r
--                         INNER JOIN
--                                 (SELECT event, CAST(AVG(score) AS DECIMAL) AS ascore
--                                     FROM review
--                                     GROUP BY event) AS agr
--                             ON r.event = agr.event)
--             GROUP BY "USER") AS sum_fac
--     LEFT OUTER JOIN
--             (SELECT "USER", COUNT(*) AS sscored_nrevs
--             FROM
--                         (SELECT "USER", event, score FROM review) AS r
--                 INNER JOIN
--                         (SELECT event, CAST(AVG(score) AS DECIMAL) AS ascore
--                             FROM review
--                             GROUP BY event) AS agr
--                     ON r.event = agr.event AND r.score = agr.ascore
--             GROUP BY "USER") AS sscore
--         ON sum_fac.user = sscore.user
--     INNER JOIN
--             (SELECT "USER", COUNT(*) AS nrevs FROM review GROUP BY "USER") AS r
--         ON r.user = sum_fac.user
-- ORDER BY si DESC;


