-- Query 1

-- Query to find all multi-day events
SELECT * FROM event WHERE days(enddate) - days(startdate) > 0 ORDER BY startdate ASC, title ASC

-- Pretty print the above query
SELECT eid, CAST(title AS VARCHAR(30)), CAST(description AS VARCHAR(20)), startdate, enddate, organizer, postcode FROM event WHERE days(enddate) - days(startdate) > 0 ORDER BY startdate ASC, title ASC

-- Clarifications:
The `days(enddate) - days(startdate)` part returns the number of days between
enddate and startdate. If the number of days is greater than 0, then the enddate
and startdate are not the same, which means that the event is a multi-day event.
We will select all the columns in the table event whose rows satisfy the above
condition. `ORDER BY startdate` will order the result by increasing startdate and
`title ASC` will order the result in alphabetical order on title in case the
events have the same startdate.


-- Query 2

SELECT eid, title FROM event WHERE postcode in (SELECT postcode FROM region WHERE name = 'Golden Horseshoe') ORDER BY title ASC

-- Clarifications:
`SELECT postcode FROM region WHERE name = 'Golden Horseshoe'` will return a
"list" of postal codes that are in the region named Golden Horseshoe. Thus,
`SELECT eid, title FROM event WHERE postcode in (SELECT postcode FROM region WHERE name = 'Golden Horseshoe')`
will return the columns eid and title of the table event whose event's postal code
is in the  above list. `ORDER BY title ASC` orders the result in alphabetical
order in title.


-- Query 3

-- All the users that have written review
SELECT uid, name FROM user WHERE uid IN (SELECT user FROM review) AND uid NOT IN (SELECT organizer FROM event)

-- Clarifications:
A user is active (have written a review) is the user whose uid is in the review,
that is the uid is in the user column of the table review. Thus, `uid IN (SELECT user FROM review)`
is a condition for the query. A user who is not the organizer of any events is
the user whose uid does not appear in the organizer column of the table event.
Thus, `uid NOT IN (SELECT organizer FROM event)` is the second condition for the
query. We then, only select the uid and name columns of the resulting table.
Since this query does not require ordering, we do not use `ORDER BY`.


-- Query 4

---- Pretty print the review
SELECT user, event, CAST(description AS VARCHAR(30)) AS description, score, reviewdate FROM review

---- event id, the number of reviews, the average score
SELECT event, COUNT(*) AS nrev, AVG(score) AS ascore FROM review GROUP BY event


a)
-- Query
SELECT eid, title, description, startdate, enddate, organizer, postcode, nrev, ascore FROM event INNER JOIN (SELECT event, COUNT(*) AS nrev, AVG(score) AS ascore FROM review GROUP BY event) AS r ON event.eid = r.event ORDER BY ascore DESC, title ASC

-- Pretty print the query
SELECT eid, CAST(title AS VARCHAR(28)) AS title, CAST(description AS VARCHAR(12)) AS description, startdate, enddate, organizer, postcode, nrev, ascore FROM event INNER JOIN (SELECT event, COUNT(*) AS nrev, AVG(score) AS ascore FROM review GROUP BY event) AS r ON event.eid = r.event ORDER BY ascore DESC, title ASC


b)



